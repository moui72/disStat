"0","### counts"
"0","irt_data$Participant <- as.factor(irt_data$Participant)"
"0","irt_data$Participant <- relevel(irt_data$Participant,ref=9)"
"0","recs<-nrow(irt_data)"
"0","subjs<-length(levels(irt_data$Participant))"
"0","items<-length(levels(irt_data$Item))"
"0","expectN <- subjs * items"
"0",""
"0","### utterance lengths"
"0","if(!use_old){"
"0","  ### only available in newer files"
"0","  uls <- append(irt_data$`R1 UL`,irt_data$`R2 UL`)"
"0","  uls_desc <- describe(uls)"
"0","  uls_r1_desc <- describe(irt_data$`R1 UL`)"
"0","  uls_r2_desc <- describe(irt_data$`R2 UL`)"
"0","}"
"0",""
"0","### note properties"
"0","irt_props_all <- describe(irt_data$irt)"
"0","irt_props <- describe(irt_data$irt)"
"0","wirt_props <- describe(irt_data$win_irt)"
"0",""
"0","### sd by condition table"
"0","sdByConditionLong <- aggregate("
"0","  irt_data$win_irt,"
"0","  by=list("
"0","    ""Q""=irt_data$Q,"
"0","    ""GP""=irt_data$GP"
"0","  ),"
"0","  FUN=sd"
"0",")"
"0",""
"0","### means by condition table"
"0","meansByConditionLong <- aggregate("
"0","  irt_data$win_irt,"
"0","  by=list("
"0","    ""Q""=irt_data$Q,"
"0","    ""GP""=irt_data$GP"
"0","  ),"
"0","  FUN=mean"
"0",")"
"0","names(meansByConditionLong)[3] <- ""mean"""
"0","### concise means by condition table"
"0","meansByCondition <- meansByConditionLong %>% spread(Q,mean) "
"0","names(meansByCondition)[1] <- ""Condition"""
"0","### add sd and se to meansByConditionLong"
"0","meansByConditionLong$sd<-sdByConditionLong$x"
"0","meansByConditionLong$se<-sdByConditionLong$x/sqrt(irt_props$n)"
"0",""
"0",""
"0","### difference in condition means"
"0","diffs<-list(Condition=""Increase"", `D`=diff(meansByCondition$`D`), `Q`= diff(meansByCondition$`Q`))"
"0","meansByCondition<-rbind(meansByCondition, diffs)"
"0","cdiff <- meansByCondition$`D`[3]-meansByCondition$`Q`[3]"
"0",""
"0","### participant means by condition"
"0","pmeansByCondition <- aggregate("
"0","  irt_data$irt,"
"0","  by=list("
"0","    ""Condition""=irt_data$cond,"
"0","    ""Participant""=irt_data$Participant"
"0","  ),"
"0","  FUN=mean"
"0",") %>% spread(Condition,x) "
"0","pmeansByCondition$pattern <- ("
"0","  pmeansByCondition$`Q +GP` - pmeansByCondition$`Q -GP` <"
"0","  pmeansByCondition$`D +GP` - pmeansByCondition$`D -GP`"
"0",") "
"0",""
"0","### simple P means"
"0","spm <- aggregate("
"0","  irt_data$irt,"
"0","  by=list("
"0","    ""Participant""=irt_data$Participant"
"0","  ),"
"0","  FUN=mean"
"0",") "
"0",""
"0"," "
"0","prosDescrip <- describe(mdata)"
"2","NAs introduced by coercion"
"2","NAs introduced by coercion"
"2","NAs introduced by coercion"
"2","NAs introduced by coercion"
"2","NAs introduced by coercion"
"2","NAs introduced by coercion"
"2","NAs introduced by coercion"
"2","NAs introduced by coercion"
"2","no non-missing arguments to min; returning Inf"
"2","no non-missing arguments to min; returning Inf"
"2","no non-missing arguments to min; returning Inf"
"2","no non-missing arguments to min; returning Inf"
"2","no non-missing arguments to min; returning Inf"
"2","no non-missing arguments to min; returning Inf"
"2","no non-missing arguments to min; returning Inf"
"2","no non-missing arguments to min; returning Inf"
"2","no non-missing arguments to min; returning Inf"
"2","no non-missing arguments to min; returning Inf"
"2","no non-missing arguments to min; returning Inf"
"2","no non-missing arguments to min; returning Inf"
"2","no non-missing arguments to min; returning Inf"
"2","no non-missing arguments to min; returning Inf"
"2","no non-missing arguments to min; returning Inf"
"2","no non-missing arguments to min; returning Inf"
"2","no non-missing arguments to max; returning -Inf"
"2","no non-missing arguments to max; returning -Inf"
"2","no non-missing arguments to max; returning -Inf"
"2","no non-missing arguments to max; returning -Inf"
"2","no non-missing arguments to max; returning -Inf"
"2","no non-missing arguments to max; returning -Inf"
"2","no non-missing arguments to max; returning -Inf"
"2","no non-missing arguments to max; returning -Inf"
"2","no non-missing arguments to max; returning -Inf"
"2","no non-missing arguments to max; returning -Inf"
"2","no non-missing arguments to max; returning -Inf"
"2","no non-missing arguments to max; returning -Inf"
"2","no non-missing arguments to max; returning -Inf"
"2","no non-missing arguments to max; returning -Inf"
"2","no non-missing arguments to max; returning -Inf"
"2","no non-missing arguments to max; returning -Inf"
"0","tot<-as.data.frame(xtabs( ~ Condition_GP + Condition_Q, data=mdata))"
"0","gtot <- tot"
"0",""
"0","orderMap <- read_csv("
"0","  ""../csvs/src/order-p-map.csv"","
"0","  col_types = cols("
"0","    ID = col_character(),"
"0","    Order = col_character(),"
"0","    LIST = col_character()"
"0","  )"
"0",")"
"0",""
"0","orderMap$Participant <- orderMap$ID"
"0","orderMap$ID <- NULL"
"0",""
"0","mdata<-merge(mdata,orderMap,by=""Participant"")"
"0","write_csv(mdata,""export/prosody_data.csv"")"
"0",""
"0","versiontab <- mdata %>% "
"0","  filter(!duplicated(Participant)) %>%"
"0","  with(table(""Version""=LIST,Order)) %>%"
"0","  addmargins() "
"0",""
"0","rownames(versiontab)[1:4]<-paste(""Version"", rownames(versiontab))"
"2","number of items to replace is not a multiple of replacement length"
